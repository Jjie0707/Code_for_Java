package test;
/*
给你一个整数数组 nums 。请你创建一个满足以下条件的二维数组：

二维数组应该 只 包含数组 nums 中的元素。
二维数组中的每一行都包含 不同 的整数。
二维数组的行数应尽可能 少 。
返回结果数组。如果存在多种答案，则返回其中任何一种。

请注意，二维数组的每一行上可以存在不同数量的元素。

示例 1：
nums = [1,3,4,1,2,3,1]
输出：[[1,3,4,2],[1,3],[1]]
解释：根据题目要求可以创建包含以下几行元素的二维数组：
- 1,3,4,2
- 1,3
- 1
nums 中的所有元素都有用到，并且每一行都由不同的整数组成，所以这是一个符合题目要求的答案。
可以证明无法创建少于三行且符合题目要求的二维数组。
 */
public class Test {
    /*

    思路1：由于是有重复元素，最多有多少个重复元素就得有至少多少个数组，我们可以先将数组排序
    然后遍历数组只需遍历一边数组就可以
    如： nums = [1,3,4,1,2,3,1]
    排序之后的结果是。 1，1，1，2，3，3，4
    现在开始遍历数组：
    有三个1，我们第一步创建三个vector（应该是这个 记得有这个东西不用自己确定长度 ） ，遍历到 arr[i+1]!=1
    有几个1就把这些1分别存到每个数组的第一个，再往后遍历
    2的数量比1少，遍历二维数组的每一个数组，直到2被存完
    后面 3 和 4 同理
    假设遇到比1数量多的只需要在原来的基础上多创建几个数组即可
    整体排序的复杂度最快可以达到 O（n*log n）
    遍历一遍数组逻辑上复杂度是 O（n）

    思路2:
    不用排序，或许可以直接遍历原来的数组统计每个元素的数量，用另一个数组（字典）存下来，
    再遍历新建的个数数组，根据思路1的逻辑创建vector
    逻辑上时间复杂度比较快大概是O（n）
    但是空间复杂度比较大 也是O（n）

     */
}
